// 分而治之是算法设计中的一种方法，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并

// 关于分而治之的实现，都会经历三个步骤：

// 分解：将原问题分解为若干个规模较小，相对独立，与原问题形式相同的子问题
// 解决：若子问题规模较小且易于解决时，则直接解。否则，递归地解决各子问题
// 合并：将各子问题的解合并为原问题的解

// 二分分支
function binarySearchDivide(arr, l, r, target) {
  if (l > r) {
    return -1
  }
  let mid = l + Math.floor((l + r) / 2)
  if (arr[mid] === target) {
    return mid
  } else if (arr[mid] < target) {
    return binarySearchDivide(arr, mid + 1, r, target)
  } else {
    return binarySearchDivide(arr, l, mid - 1, target)
  }
}


// 动态规划，同样是算法设计中的一种方法，是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法

// 常常适用于有重叠子问题和最优子结构性质的问题

// 简单来说，动态规划其实就是，给定一个问题，我们把它拆成一个个子问题，直到子问题可以直接解决

// 然后呢，把子问题答案保存起来，以减少重复计算。再根据子问题答案反推，得出原问题解的一种方法。

// 一般这些子问题很相似，可以通过函数关系式递推出来，例如斐波那契数列，我们可以得到公式：当 n 大于 2的时候，F(n) = F(n-1) + F(n-2) ，

// f(10)= f(9)+f(8),f(9) = f(8) + f(7)...是重叠子问题，当n = 1、2的时候，对应的值为2，这时候就通过可以使用一个数组记录每一步计算的结果，以此类推，减少不必要的重复计算

// #适用场景